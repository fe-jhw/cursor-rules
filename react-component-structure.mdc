---
description: React 컴포넌트 내 코드를 종류가 아닌 기능/역할 중심으로 그룹화하여 배치하는 규칙
globs: *.tsx
alwaysApply: true
---
# 리액트 컴포넌트 구조: 기능 기반 배치(Co-location)

## 원칙
- 코드를 종류(`useState`, `useEffect` 등)가 아닌, **기능(Feature)** 또는 **역할(Role)** 단위로 묶습니다.
- 하나의 기능을 위한 상태, 이펙트, 핸들러 등 관련된 모든 로직은 한 곳에 배치합니다.

## 모범 사례
1.  **전역 훅 먼저:** `useRouter`, `useContext`처럼 컴포넌트 전반에 영향을 주는 훅을 최상단에 배치합니다.
2.  **기능별 그룹화:** `// --- 기능 이름 ---` 같은 주석을 사용해 각 기능 단위를 명확히 구분합니다.
3.  **관련 로직 함께 배치:** 각 기능 그룹 안에 해당 기능의 상태, 이펙트, 핸들러를 모두 모아둡니다.
4.  **렌더링은 마지막에:** JSX를 반환하는 `return`문은 항상 컴포넌트의 가장 마지막에 위치시킵니다.
5.  **Named Export 사용:** 컴포넌트는 `named export` (`export const Component`)를 사용합니다. 이는 코드베이스 전체에서 일관된 이름을 유지하고, 검색 및 리팩토링을 용이하게 합니다. `default export`는 지양합니다.

## 예시

### 컴포넌트 내부 구조
```jsx
function Component() {
  // --- 기능 A ---
  const [상태A, set상태A] = useState();
  const handleA = () => { /* A를 위한 로직 */ };
  useEffect(() => { /* A를 위한 이펙트 */ }, [상태A]);

  // --- 기능 B ---
  const [상태B, set상태B] = useState();
  const handleB = () => { /* B를 위한 로직 */ };

  // --- 렌더링 ---
  return (/* JSX */);
}
```

### Export 방식
```jsx
// Good: Named Export
export const MyComponent = () => {
  // ...
};

// Bad: Default Export
export default function MyComponent() {
  // ...
}
```